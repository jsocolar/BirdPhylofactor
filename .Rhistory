nfactors=100,ncores=7,algorithm = 'mStable',family=binomial,PartitioningVariables = 'LUI')
pf$factors
save(list=ls(),file='workspaces/CR_LUI_mStable_phylofactorization_workspace')
pf
pf.tree(pf)
s <- summary(pf,taxonomy,n)                                     ### shortest-unique-taxonomic-prefix grouping & signal calculation for relative importance
s$group1
pf$models[[1]]$data %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()
pf$models[[1]]$data %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()
rm(list=ls())
load('workspaces/CR_LUI_mStable_phylofactorization_workspace')
pf
pf.tree(pf)
pf$models[[1]]$data %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()
pf$models[[1]]$data$phylo=='R'
pf$models[[1]]$data[pf$models[[1]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()
n=1
s <- summary(pf,taxonomy,n)                                     ### shortest-unique-taxonomic-prefix grouping & signal calculation for relative importance
s$group1
s <- summary(pf,taxonomy,n)                                     ### shortest-unique-taxonomic-prefix grouping & signal calculation for relative importance
s$group.summary$Group1
s$taxa.split
s$taxa.split
s$taxa.split ##group1 is the descendant group, R, in the data below:
pf$models[[n]]$data$phylo=='R'
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()
n=2
s <- summary(pf,taxonomy,n)                                     ### shortest-unique-taxonomic-prefix grouping & signal calculation for relative importance
s$taxa.split ##group1 is the descendant group, R, in the data below:
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()
s$taxa.split$group1 ##group1 is the descendant group, R, in the data below:
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()
pvDeviance(pf$models[[100]],pf$groups[[100]],pf$tree,PartitioningVariables = ='LUI',model.fcn=glm,phyloData=pf$models[[100]]$data)
pvDeviance(pf$models[[100]],pf$groups[[100]],pf$tree,PartitioningVariables='LUI',model.fcn=glm,phyloData=pf$models[[100]]$data)
pf$models[[100]]
anova(pf$models[[100]])
anova(pf$models[[100]]) %>% summary
anova(pf$models[[100]],test='Chisq')
dim(Successes)
rm(list=ls())
##Phylofactorization of Costa Rican birds data
### If you haven't already installed the updated phylofactor package, run the 5 lines below
# source("https://bioconductor.org/biocLite.R")
# biocLite("ggtree")
# biocLite("Biostrings")
# install.packages('devtools')
# devtools::install_github('reptalex/phylofactor')
library(phylofactor)
### import & pre-process data
X <- read.csv('data/CRBirds.csv',header=T,
colClasses = c('factor','factor','numeric','factor','character','numeric')) %>%
as.data.table
X <- X[!duplicated(X),]   #removing duplicate rows - not sure what to do with those.
names(X)[names(X)=='Spp'] <- 'Species'
X[,Species:=gsub(' ','_',Species)]
bird.species <- unique(X$Species)
taxonomy <- read.csv('data/2012-03-04206D-master_taxonomy.csv',header=T,stringsAsFactors = F)
tiplabels <- taxonomy$TipLabel
tax <- taxonomy[,c('OscSubOsc','Order','BLFamilyLatin','Clade','TipLabel')]
tax <- apply(tax,1,paste,collapse='; ')   ##semicolon delimited taxonomies are necessary for taxonomic summaries
taxonomy <- data.frame("Species"=tiplabels,'taxonomy'=tax,stringsAsFactors = F)
### Start with a single tree
tree <- read.tree('data/JETZ TREES/Jetz_with_Furnariidae_March2013__tree1.txt')
bird.species[!bird.species %in% tree$tip.label] #18 species not found in tree tip labels
# [1] "Veniliornis_fumigatus"     "Pipra_coronata"
# [3] "Xenops_minutus"            "Contopus_sp."
# [5] "Pionopsitta_haematotis"    "Piculus_rubiginosus"
# [7] "Automolus_rubiginosus"     "Buarremon_brunneinucha"
# [9] "Myrmotherula_fulviventris" "Ciccaba_virgata"
# [11] "Amazilia_sp."              "Empidonax_sp."
# [13] "Laterallus_sp."            "Ardea_alba"
# [15] "Ceryle_torquatus"          "Gallinago_delicata"
# [17] "Ceryle_alcyon"             "Buarremon_torquatus"
X <- X[Species %in% tree$tip.label,]  ## filter dataset to species in tree
bird.species <- unique(X$Species)
tree <- drop.tip(tree,setdiff(tree$tip.label,bird.species)) ## trim tree to only species in data
X[,Sample:=paste(Transect,Year,Season,LUI,sep='_')]
X[,N:=Number.of.surveys.per.season.detection..out.of.3.]
### There are two main for generalized phylofactorization of these data
## (1) algorithm='mStable' - sum counts within groups and use factor contrasts to ID edges best separating species
## (2) algorithm='phylo' - skip within-group summation. Much more costly
### We'll use the mStable algorithm.
## While the function gpf() accepts glm-style input of data frames containing all the variables
## used in regression, the mStable algorithm will convert that data frame into a matrix & operate on it
## accordingly. To make our workspace easily merged with the mStable phylofactor object,
## we'll make those matrices. For binoimal regression, need a list containing two matrices: Successes & Failures.
## In this script, the absence of a species is considered 0 successes, 3 failures.
Successes <- phyloframe.to.matrix(X)
## We'll put the successes & failures in the same order as tree$tip.labels
Successes <- Successes[tree$tip.label,]
Failures <- 3-Successes
### The meta-data must have rows match each column in Successes.
MetaData <- X[,c('Sample','Season','LUI','Year','Transect')]
MetaData <- MetaData[!duplicated(MetaData)]
MetaData <- MetaData[match(colnames(Successes),Sample),]
Data <- list('Successes'=Successes,'Failures'=Failures)
pf <- gpf(Data,tree,MetaData=MetaData,frmla.phylo=cbind(Successes,Failures)~Season+phylo*LUI,
nfactors=200,ncores=7,algorithm = 'mStable',family=binomial,PartitioningVariables = 'LUI')
## If we don't set PartitioningVariables='LUI', then gpf will also partition edges based on the deviance
## from the term phylo all by itself (i.e. edges separating species with a high difference in P{Success}
## irrespective of how that P{Success} changes with LUI)
save(list=ls(),file='workspaces/CR_LUI_mStable_phylofactorization_workspace')
pf$factors
n_edge <- Nedge(tree)
n_edge
model_deviance <- numeric(pf$nfactors)
for (i in 1:pf$nfactors){
model_deviance[i] <- pvDeviance(pf$models[[i]],pf$groups[[i]],pf$tree,
PartitioningVariables = 'LUI',model.fcn = glm,pf$models[[i]]$data)
}
model_deviance
pvals <- pchisq(model_deviance,df=2)
hist(pvals)
pvals <- 1-pchisq(model_deviance,df=2)
pvals
cutoff <- 0.05/n_edge
cutoff
min(which(pvals>cutoff))
library(phylofactor)
library(ggplot)
library(ggpubr)
load('workspaces/CR_LUI_mStable_phylofactorization_workspace')
pf
pf$factors
pf.tree(pf,factors = 1:7)
tree_plot <-  pf.tree(pf,factors = 1:7)
tree_plot$ggplot
n=1
pf$models[[n]]$data$phylo=='R'
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes,fill=tree_plot$legend$colors[n]))+
geom_boxplot()
tree_plot$ggplot
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes),fill=tree_plot$legend$colors[n])+
geom_boxplot()
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes),color=tree_plot$legend$colors[n])+
geom_boxplot()
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(,color=tree_plot$legend$colors[n])
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n])
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n])+
geom_jitter(position = position)
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n])+
geom_jitter(position = LUI)
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n])+
geom_jitter()
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n],color='yellow',alpha=0.4)+
geom_jitter(fill=)
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n],color='yellow',alpha=0.4)+
geom_jitter(fill=tree_plot$legend$colors[n])
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n],color='yellow',alpha=0.4)+
geom_jitter(color=tree_plot$legend$colors[n])
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n],alpha=0.4)+
geom_jitter(color=tree_plot$legend$colors[n])
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n],alpha=0.4)+
geom_jitter(color=tree_plot$legend$colors[n])+
ggtitle(paste('Factor',n))
box_plot <- pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n],alpha=0.4)+
geom_jitter(color=tree_plot$legend$colors[n])+
ggtitle(paste('Factor',n))
ggarrange(tree_plot$ggplot,box_plot,nrow=2)
ggarrange(tree_plot$ggplot,box_plot,ncol=2)
box_plot <- pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n])+
geom_jitter(color=tree_plot$legend$colors[n],alpha=0.4)+
ggtitle(paste('Factor',n))
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n])+
geom_jitter(color=tree_plot$legend$colors[n],alpha=0.4)+
ggtitle(paste('Factor',n))
box_plot <- pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n])+
geom_jitter(color=tree_plot$legend$colors[n],alpha=0.4,cex=2)+
ggtitle(paste('Factor',n))
box_plot <- pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n])+
geom_jitter(color=tree_plot$legend$colors[n],alpha=0.4,size=2)+
ggtitle(paste('Factor',n))
box_plot <- pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n])+
geom_jitter(color=tree_plot$legend$colors[n],size=3)+
ggtitle(paste('Factor',n))
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n])+
geom_jitter(color=tree_plot$legend$colors[n],size=3)+
ggtitle(paste('Factor',n))
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot(fill=tree_plot$legend$colors[n])+
geom_jitter(color=tree_plot$legend$colors[n],size=3,pch=1)+
ggtitle(paste('Factor',n))
box_plot <- pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()+
geom_jitter(color=tree_plot$legend$colors[n],size=3)+
ggtitle(paste('Factor',n))
ggarrange(tree_plot$ggplot,box_plot,ncol=2)
box_plot <- pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()+
geom_jitter(color=tree_plot$legend$colors[n],size=3,width = 1)+
ggtitle(paste('Factor',n))
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()+
geom_jitter(color=tree_plot$legend$colors[n],size=3,width = 1)+
ggtitle(paste('Factor',n))
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()+
geom_jitter(color=tree_plot$legend$colors[n],size=3,width = .1)+
ggtitle(paste('Factor',n))
box_plot <- pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()+
geom_jitter(color=tree_plot$legend$colors[n],size=3,width = .2)+
ggtitle(paste('Factor',n))
ggarrange(tree_plot$ggplot,box_plot,ncol=2)
pf$factors[1:7,]
n=7
box_plot <- pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()+
geom_jitter(color=tree_plot$legend$colors[n],size=3,width = .2)+
ggtitle(paste('Factor',n))
ggarrange(tree_plot$ggplot,box_plot,ncol=2)
X
X[,LUI:=factor(LUI,levels=c('Forest','Diversified','Intensive'))]
i=1
pf$MetaData %>% class
pf$MetaData[,LUI:=factor(LUI,levels=c('Forest','Diversified','Intensive'))]
for (i in 1:pf$nfactors){
pf$models[[i]]$data$LUI <- factor(pf$models[[i]]$data$LUI,levels=c('Forest','Diversified','Intensive'))
}
rm('tree_plot')
rm('box_plot')
save(list=ls(),file='workspaces/CR_LUI_mStable_phylofactorization_workspace')
pf
tree_plot <-  pf.tree(pf,factors = 1:7)
tree_plot$ggplot
### Demo: how to plot data for a factor that matches colors in the tree_plot
n=7
box_plot <- pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()+
geom_jitter(color=tree_plot$legend$colors[n],size=3,width = .2)+
ggtitle(paste('Factor',n))
ggarrange(tree_plot$ggplot,box_plot,ncol=2)
n=7
s <- summary(pf,taxonomy,n)                                     ### shortest-unique-taxonomic-prefix grouping & signal calculation for relative importance
s$taxa.split$group1 ##group1 is the descendant and often monophyletic group, R, in the data below:
s
s.species <- summary(pf,taxonomy,n,taxon.trimming='species')  ### provides species-specific signal calculation
s.species
s.species$taxon.tables
devtools::install_github('reptalex/phylofactor')
s <- summary(pf,taxonomy,n)                                     ### shortest-unique-taxonomic-prefix grouping & signal calculation for relative importance
s
s.species <- summary(pf,taxonomy,n,taxon.trimming='species')  ### provides species-specific signal calculation
s.species$signal.table
s.species$signal.table$Group1[1:10,]
s.species$signal.table$Group2[1:10,]
pf$factors[8:12,]
pf$factors[1:50,]
pf$tree$tip.label[pf$groups[[8]][[1]]]
pf$tree$tip.label[pf$groups[[9]][[1]]]
s.species$signal.table$Group2
pf$tree$tip.label[pf$groups[[10]][[1]]]
pf$tree$tip.label[pf$groups[[17]][[1]]]
s.species$signal.table$Group1
pf$tree$tip.label[pf$groups[[17]][[1]]]
which(grepl('Synallaxis',s.species$signal.table$Group1$Taxon))
pf$tree$tip.label[sapply(pf$groups[8:10],'[[',1)]
summary(pf,taxonomy,17)
pf.boxplot <- function(n,pf.=pf){
pf$models[[n]]$data[pf$models[[n]]$data$phylo=='R'] %>%
ggplot(aes(LUI,Successes))+
geom_boxplot()+
geom_jitter(viridis::viridis(1),size=3,width = .2)+
ggtitle(paste('Factor',n))
}
pf.boxplot(17)
pf$models[[n]]$data %>%
ggplot(aes(LUI,Successes,color=phylo))+
geom_boxplot()+
geom_jitter(viridis::viridis(1),size=3,width = .2)+
facet_grid(.~phylo)
ggtitle(paste('Factor',n))
pf$models[[n]]$data %>%
ggplot(aes(LUI,Successes,color=phylo))+
geom_boxplot()+
geom_jitter(color=viridis::viridis(1),size=3,width = .2)+
facet_grid(.~phylo)+
ggtitle(paste('Factor',n))
pf$models[[n]]$data %>%
ggplot(aes(LUI,Successes,color=phylo))+
geom_boxplot()+
geom_jitter(size=3,width = .2)+
facet_grid(.~phylo)+
ggtitle(paste('Factor',n))
pf.boxplot <- function(n,pf.=pf){
pf$models[[n]]$data %>%
ggplot(aes(LUI,Successes,color=phylo))+
geom_boxplot()+
geom_jitter(size=3,width = .2)+
facet_grid(.~phylo)+
ggtitle(paste('Factor',n))
}
pf.boxplot(18)
summary(pf,taxonomy,18)
library(phylofactor)
### import & pre-process data
X <- read.csv('data/CRBirds.csv',header=T,
colClasses = c('factor','factor','numeric','factor','character','numeric')) %>%
as.data.table
X <- X[!duplicated(X),]   #removing duplicate rows - not sure what to do with those.
names(X)[names(X)=='Spp'] <- 'Species'
X[,Species:=gsub(' ','_',Species)]
bird.species <- unique(X$Species)
X[,LUI:=factor(LUI,levels=c('Forest','Diversified','Intensive'))]
taxonomy <- read.csv('data/2012-03-04206D-master_taxonomy.csv',header=T,stringsAsFactors = F)
tiplabels <- taxonomy$TipLabel
tax <- taxonomy[,c('OscSubOsc','Order','BLFamilyLatin','Clade','TipLabel')]
tax <- apply(tax,1,paste,collapse='; ')   ##semicolon delimited taxonomies are necessary for taxonomic summaries
taxonomy <- data.frame("Species"=tiplabels,'taxonomy'=tax,stringsAsFactors = F)
### Start with a single tree
tree <- read.tree('data/JETZ TREES/Jetz_with_Furnariidae_March2013__tree1.txt')
bird.species[!bird.species %in% tree$tip.label] #18 species not found in tree tip labels
# [1] "Veniliornis_fumigatus"     "Pipra_coronata"
# [3] "Xenops_minutus"            "Contopus_sp."
# [5] "Pionopsitta_haematotis"    "Piculus_rubiginosus"
# [7] "Automolus_rubiginosus"     "Buarremon_brunneinucha"
# [9] "Myrmotherula_fulviventris" "Ciccaba_virgata"
# [11] "Amazilia_sp."              "Empidonax_sp."
# [13] "Laterallus_sp."            "Ardea_alba"
# [15] "Ceryle_torquatus"          "Gallinago_delicata"
# [17] "Ceryle_alcyon"             "Buarremon_torquatus"
X <- X[Species %in% tree$tip.label,]  ## filter dataset to species in tree
bird.species <- unique(X$Species)
tree <- drop.tip(tree,setdiff(tree$tip.label,bird.species)) ## trim tree to only species in data
X[,Sample:=paste(Transect,Year,Season,LUI,sep='_')]
X[,N:=Number.of.surveys.per.season.detection..out.of.3.]
### There are two main for generalized phylofactorization of these data
## (1) algorithm='mStable' - sum counts within groups and use factor contrasts to ID edges best separating species
## (2) algorithm='phylo' - skip within-group summation. Much more costly
### We'll use the mStable algorithm.
## While the function gpf() accepts glm-style input of data frames containing all the variables
## used in regression, the mStable algorithm will convert that data frame into a matrix & operate on it
## accordingly. To make our workspace easily merged with the mStable phylofactor object,
## we'll make those matrices. For binoimal regression, need a list containing two matrices: Successes & Failures.
## In this script, the absence of a species is considered 0 successes, 3 failures.
Successes <- phyloframe.to.matrix(X)
## We'll put the successes & failures in the same order as tree$tip.labels
Successes <- Successes[tree$tip.label,]
Failures <- 3-Successes
### The meta-data must have rows match each column in Successes.
MetaData <- X[,c('Sample','Season','LUI','Year','Transect')]
MetaData <- MetaData[!duplicated(MetaData)]
MetaData <- MetaData[match(colnames(Successes),Sample),]
Data <- list('Successes'=Successes,'Failures'=Failures)
MetaData[,LUI_quant:=as.numeric(LUI)]
MetaData
pf.gam <- gpf(Data,tree,MetaData=MetaData,frmla.phylo=cbind(Successes,Failures)~Season+s(LUI,by=phylo),
nfactors=200,ncores=7,algorithm = 'mStable',family=binomial,PartitioningVariables = 'LUI',
model.fcn=mgcv::gam)
pf.gam <- gpf(Data,tree,MetaData=MetaData,frmla.phylo=cbind(Successes,Failures)~Season+s(LUI,by=phylo),
nfactors=5,ncores=7,algorithm = 'mStable',family=binomial,PartitioningVariables = 'LUI',
model.fcn=mgcv::gam)
pf.gam <- gpf(Data,tree,MetaData=MetaData,frmla.phylo=cbind(Successes,Failures)~Season+s(LUI_quant,by=phylo),
nfactors=5,ncores=7,algorithm = 'mStable',family=binomial,PartitioningVariables = 'LUI',
model.fcn=mgcv::gam)
load('workspaces/CR_LUI_mStable_phylofactorization_workspace')
D <- pf$models[[1]]$data
D[,LUI_quant:=as.numeric(LUI)]
mgcv::gam(cbind(Successes,Failures)~Season+s(LUI_quant,by=phylo),data=D)
pf.quant <- gpf(Data,tree,MetaData=MetaData,frmla.phylo=cbind(Successes,Failures)~Season+phylo*LUI_quant,
nfactors=5,ncores=7,algorithm = 'mStable',family=binomial,PartitioningVariables = 'LUI_quant')
MetaData[,LUI_quant:=as.numeric(LUI)]
pf_quant <- gpf(Data,tree,MetaData=MetaData,frmla.phylo=cbind(Successes,Failures)~Season+phylo*LUI_quant,
nfactors=5,ncores=7,algorithm = 'mStable',family=binomial,PartitioningVariables = 'LUI_quant')
pf_quant
pf.boxplot <- function(n,pf.=pf){
pf$models[[n]]$data %>%
ggplot(aes(LUI,Successes,color=phylo))+
geom_boxplot()+
geom_jitter(size=3,width = .2)+
facet_grid(.~phylo)+
ggtitle(paste('Factor',n))
}
pf.boxplot(1,pf_quant)
library(ggplot)
library(ggplot2)
pf.boxplot(1,pf_quant)
pf.boxplot(4,pf_quant)
rm(list=ls())
##Phylofactorization of Costa Rican birds data
### If you haven't already installed the updated phylofactor package, run the 5 lines below
# source("https://bioconductor.org/biocLite.R")
# biocLite("ggtree")
# biocLite("Biostrings")
# install.packages('devtools')
# devtools::install_github('reptalex/phylofactor')
library(phylofactor)
### import & pre-process data
X <- read.csv('data/CRBirds.csv',header=T,
colClasses = c('factor','factor','numeric','factor','character','numeric')) %>%
as.data.table
X <- X[!duplicated(X),]   #removing duplicate rows - not sure what to do with those.
names(X)[names(X)=='Spp'] <- 'Species'
X[,Species:=gsub(' ','_',Species)]
bird.species <- unique(X$Species)
X[,LUI:=factor(LUI,levels=c('Forest','Diversified','Intensive'))]
taxonomy <- read.csv('data/2012-03-04206D-master_taxonomy.csv',header=T,stringsAsFactors = F)
tiplabels <- taxonomy$TipLabel
tax <- taxonomy[,c('OscSubOsc','Order','BLFamilyLatin','Clade','TipLabel')]
tax <- apply(tax,1,paste,collapse='; ')   ##semicolon delimited taxonomies are necessary for taxonomic summaries
taxonomy <- data.frame("Species"=tiplabels,'taxonomy'=tax,stringsAsFactors = F)
### Start with a single tree
tree <- read.tree('data/JETZ TREES/Jetz_with_Furnariidae_March2013__tree1.txt')
bird.species[!bird.species %in% tree$tip.label] #18 species not found in tree tip labels
# [1] "Veniliornis_fumigatus"     "Pipra_coronata"
# [3] "Xenops_minutus"            "Contopus_sp."
# [5] "Pionopsitta_haematotis"    "Piculus_rubiginosus"
# [7] "Automolus_rubiginosus"     "Buarremon_brunneinucha"
# [9] "Myrmotherula_fulviventris" "Ciccaba_virgata"
# [11] "Amazilia_sp."              "Empidonax_sp."
# [13] "Laterallus_sp."            "Ardea_alba"
# [15] "Ceryle_torquatus"          "Gallinago_delicata"
# [17] "Ceryle_alcyon"             "Buarremon_torquatus"
X <- X[Species %in% tree$tip.label,]  ## filter dataset to species in tree
bird.species <- unique(X$Species)
tree <- drop.tip(tree,setdiff(tree$tip.label,bird.species)) ## trim tree to only species in data
X[,Sample:=paste(Transect,Year,Season,LUI,sep='_')]
X[,N:=Number.of.surveys.per.season.detection..out.of.3.]
### There are two main for generalized phylofactorization of these data
## (1) algorithm='mStable' - sum counts within groups and use factor contrasts to ID edges best separating species
## (2) algorithm='phylo' - skip within-group summation. Much more costly
### We'll use the mStable algorithm.
## While the function gpf() accepts glm-style input of data frames containing all the variables
## used in regression, the mStable algorithm will convert that data frame into a matrix & operate on it
## accordingly. To make our workspace easily merged with the mStable phylofactor object,
## we'll make those matrices. For binoimal regression, need a list containing two matrices: Successes & Failures.
## In this script, the absence of a species is considered 0 successes, 3 failures.
Successes <- phyloframe.to.matrix(X)
## We'll put the successes & failures in the same order as tree$tip.labels
Successes <- Successes[tree$tip.label,]
Failures <- 3-Successes
### The meta-data must have rows match each column in Successes.
MetaData <- X[,c('Sample','Season','LUI','Year','Transect')]
MetaData <- MetaData[!duplicated(MetaData)]
MetaData <- MetaData[match(colnames(Successes),Sample),]
Data <- list('Successes'=Successes,'Failures'=Failures)
pf <- gpf(Data,tree,MetaData=MetaData,frmla.phylo=cbind(Successes,Failures)~Season+phylo*LUI,
nfactors=200,ncores=7,algorithm = 'mStable',family=binomial,PartitioningVariables = 'LUI')
## If we don't set PartitioningVariables='LUI', then gpf will also partition edges based on the deviance
## from the term phylo all by itself (i.e. edges separating species with a high difference in P{Success}
## irrespective of how that P{Success} changes with LUI)
MetaData[,LUI_quant:=as.numeric(LUI)]
## We can also use a quantitative model of increasing land-use intensity. The benefit being
## that, while the phylo*LUI factor above splits differences-of-means in each group, the quant model
## focuses more on the response slopes to LUI, not the means (i.e. relative difference-of-means)
pf_quant <- gpf(Data,tree,MetaData=MetaData,frmla.phylo=cbind(Successes,Failures)~Season+phylo*LUI_quant,
nfactors=200,ncores=7,algorithm = 'mStable',family=binomial,PartitioningVariables = 'LUI_quant')
save(list=ls(),file='workspaces/CR_LUI_mStable_phylofactorization_workspace')
pf_quant
pf_quant$factors[1:20,]
