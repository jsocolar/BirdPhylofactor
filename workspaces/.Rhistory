Dt=rexp(1,S)
Dx=sample(Events,size = 1,prob = c(p1,p2))
tt=tt+Dt
Time<-c(Time,tt)
X <- c(X,xx)
if(Dx=='Birth'){
xx=xx+1
} else {
xx=xx-1
}
Time<-c(Time,tt)
X <- c(X,xx)
}
plot(times,N,type='l',ylim=c(0,40))
lines(Time,X,col='red',lwd=2)
library(tictoc)
set.seed(3)
library(tictoc)
a=5
b=1
Omega=10          #system size parameter
C=1/Omega
r=(a-b)
K=(a-b)/C
m=.1              #migration needed to prevent fixation in the event of extinction
xx=2
X=xx
Time=0
Tmax=2
tt=0
Events=c('Birth','Death')
### Euler integration of the logistic growth model dN/dt=r*N(1-N/K)
nsteps=1e3
times <- seq(0,Tmax,length.out = nsteps)
dt <- Tmax/nsteps
N <- c(xx,rep(NA,nsteps-1))
for (i in 2:nsteps){
N[i] <- N[i-1]+dt*(r*N[i-1]*(1-N[i-1]/K))
}
### Gillespie algorithm for simulating logistic growth one-step process
tic()
while(tt<Tmax){
p1=a*xx+m
p2=b*xx+C*xx^2
S=p1+p2
Dt=rexp(1,S)
Dx=sample(Events,size = 1,prob = c(p1,p2))
tt=tt+Dt
Time<-c(Time,tt)
X <- c(X,xx)
if(Dx=='Birth'){
xx=xx+1
} else {
xx=xx-1
}
Time<-c(Time,tt)
X <- c(X,xx)
}
toc()
set.seed(3)
library(tictoc)
a=5
b=1
Omega=100          #system size parameter
C=1/Omega
r=(a-b)
K=(a-b)/C
m=.1              #migration needed to prevent fixation in the event of extinction
xx=2
X=xx
Time=0
Tmax=2
tt=0
Events=c('Birth','Death')
### Euler integration of the logistic growth model dN/dt=r*N(1-N/K)
nsteps=1e3
times <- seq(0,Tmax,length.out = nsteps)
dt <- Tmax/nsteps
N <- c(xx,rep(NA,nsteps-1))
for (i in 2:nsteps){
N[i] <- N[i-1]+dt*(r*N[i-1]*(1-N[i-1]/K))
}
### Gillespie algorithm for simulating logistic growth one-step process
tic()
while(tt<Tmax){
p1=a*xx+m
p2=b*xx+C*xx^2
S=p1+p2
Dt=rexp(1,S)
Dx=sample(Events,size = 1,prob = c(p1,p2))
tt=tt+Dt
Time<-c(Time,tt)
X <- c(X,xx)
if(Dx=='Birth'){
xx=xx+1
} else {
xx=xx-1
}
Time<-c(Time,tt)
X <- c(X,xx)
}
toc()
set.seed(3)
library(tictoc)
a=5
b=1
Omega=1000          #system size parameter
C=1/Omega
r=(a-b)
K=(a-b)/C
m=.1              #migration needed to prevent fixation in the event of extinction
xx=2
X=xx
Time=0
Tmax=2
tt=0
Events=c('Birth','Death')
### Euler integration of the logistic growth model dN/dt=r*N(1-N/K)
nsteps=1e3
times <- seq(0,Tmax,length.out = nsteps)
dt <- Tmax/nsteps
N <- c(xx,rep(NA,nsteps-1))
for (i in 2:nsteps){
N[i] <- N[i-1]+dt*(r*N[i-1]*(1-N[i-1]/K))
}
### Gillespie algorithm for simulating logistic growth one-step process
tic()
while(tt<Tmax){
p1=a*xx+m
p2=b*xx+C*xx^2
S=p1+p2
Dt=rexp(1,S)
Dx=sample(Events,size = 1,prob = c(p1,p2))
tt=tt+Dt
Time<-c(Time,tt)
X <- c(X,xx)
if(Dx=='Birth'){
xx=xx+1
} else {
xx=xx-1
}
Time<-c(Time,tt)
X <- c(X,xx)
}
toc()
set.seed(3)
library(tictoc)
a=5
b=1
Omega=10000          #system size parameter
C=1/Omega
r=(a-b)
K=(a-b)/C
m=.1              #migration needed to prevent fixation in the event of extinction
xx=2
X=xx
Time=0
Tmax=2
tt=0
Events=c('Birth','Death')
### Euler integration of the logistic growth model dN/dt=r*N(1-N/K)
nsteps=1e3
times <- seq(0,Tmax,length.out = nsteps)
dt <- Tmax/nsteps
N <- c(xx,rep(NA,nsteps-1))
for (i in 2:nsteps){
N[i] <- N[i-1]+dt*(r*N[i-1]*(1-N[i-1]/K))
}
### Gillespie algorithm for simulating logistic growth one-step process
tic()
while(tt<Tmax){
p1=a*xx+m
p2=b*xx+C*xx^2
S=p1+p2
Dt=rexp(1,S)
Dx=sample(Events,size = 1,prob = c(p1,p2))
tt=tt+Dt
Time<-c(Time,tt)
X <- c(X,xx)
if(Dx=='Birth'){
xx=xx+1
} else {
xx=xx-1
}
Time<-c(Time,tt)
X <- c(X,xx)
}
toc()
K
set.seed(3)
library(tictoc)
a=5
b=1
Omega=10000          #system size parameter
C=1/Omega
r=(a-b)
K=(a-b)/C
m=.1              #migration needed to prevent fixation in the event of extinction
xx=2
X=xx
Time=0
Tmax=2
tt=0
Events=c('Birth','Death')
### Euler integration of the logistic growth model dN/dt=r*N(1-N/K)
nsteps=1e3
times <- seq(0,Tmax,length.out = nsteps)
dt <- Tmax/nsteps
N <- c(xx,rep(NA,nsteps-1))
for (i in 2:nsteps){
N[i] <- N[i-1]+dt*(r*N[i-1]*(1-N[i-1]/K))
}
### Gillespie algorithm for simulating logistic growth one-step process
tic()
while(tt<Tmax){
p1=a*xx+m
p2=b*xx+C*xx^2
S=p1+p2
Dt=rexp(1,S)
Dx=sample(Events,size = 1,prob = c(p1,p2))
tt=tt+Dt
Time<-c(Time,tt)
X <- c(X,xx)
if(Dx=='Birth'){
xx=xx+1
} else {
xx=xx-1
}
Time<-c(Time,tt)
X <- c(X,xx)
}
toc()
set.seed(3)
library(tictoc)
a=5
b=1
Omega=10000          #system size parameter
C=1/Omega
r=(a-b)
K=(a-b)/C
m=.1              #migration needed to prevent fixation in the event of extinction
xx=2
X=xx
Time=0
Tmax=2
tt=0
Events=c('Birth','Death')
### Euler integration of the logistic growth model dN/dt=r*N(1-N/K)
nsteps=1e3
times <- seq(0,Tmax,length.out = nsteps)
dt <- Tmax/nsteps
N <- c(xx,rep(NA,nsteps-1))
for (i in 2:nsteps){
N[i] <- N[i-1]+dt*(r*N[i-1]*(1-N[i-1]/K))
}
### Gillespie algorithm for simulating logistic growth one-step process
tic()
while(tt<Tmax){
p1=a*xx+m
p2=b*xx+C*xx^2
S=p1+p2
Dt=rexp(1,S)
Dx=sample(Events,size = 1,prob = c(p1,p2))
tt=tt+Dt
Time<-c(Time,tt)
X <- c(X,xx)
if(Dx=='Birth'){
xx=xx+1
} else {
xx=xx-1
}
Time<-c(Time,tt)
X <- c(X,xx)
}
toc()
X[100]
plot(times,N,type='l',ylim=c(0,40))
lines(times,N,lwd=2,col='black')
lines(Time,X,col='red',lwd=2)
set.seed(3)
library(tictoc)
a=5
b=1
Omega=10          #system size parameter
C=1/Omega
r=(a-b)
K=(a-b)/C
m=.1              #migration needed to prevent fixation in the event of extinction
xx=2
X=xx
Time=0
Tmax=2
tt=0
Events=c('Birth','Death')
### Euler integration of the logistic growth model dN/dt=r*N(1-N/K)
nsteps=1e3
times <- seq(0,Tmax,length.out = nsteps)
dt <- Tmax/nsteps
N <- c(xx,rep(NA,nsteps-1))
for (i in 2:nsteps){
N[i] <- N[i-1]+dt*(r*N[i-1]*(1-N[i-1]/K))
}
### Gillespie algorithm for simulating logistic growth one-step process
tic()
while(tt<Tmax){
p1=a*xx+m
p2=b*xx+C*xx^2
S=p1+p2
Dt=rexp(1,S)
Dx=sample(Events,size = 1,prob = c(p1,p2))
tt=tt+Dt
Time<-c(Time,tt)
X <- c(X,xx)
if(Dx=='Birth'){
xx=xx+1
} else {
xx=xx-1
}
Time<-c(Time,tt)
X <- c(X,xx)
}
toc()
###### Stochastic differential equation:
#### dY=(a-b)*Y(1-Y/K)dt+(a+b)*Y(1+Y/K)dW
logisticSDE <- function(Tmax,a,b,C,X){
Dt=0.01
Y <- numeric(Tmax/Dt+1)
Ty <- seq(0,Tmax,by=Dt)
dW <- rnorm(length(Y),sd=sqrt(Dt))
Y[1]=X[1]
for (i in 2:length(Y)){
Y[i]=Y[i-1]+
((a-b)*Y[i-1]-C*Y[i-1]^2)*Dt+
sqrt((a+b)*Y[i-1]+C*Y[i-1]^2)*dW[i]
}
return(list('time'=Ty,'Y'=Y))
}
plot(times,N,type='l',ylim=c(0,40))
for (i in 1:300){
SDE <- logisticSDE(Tmax,a,b,C,X)
lines(SDE$time,SDE$Y,type='l',col=rgb(0,0,1,0.1))
}
lines(times,N,lwd=2,col='black')
lines(Time,X,col='red',lwd=2)
set.seed(3)
library(tictoc)
a=5
b=1
Omega=10          #system size parameter
C=1/Omega
r=(a-b)
K=(a-b)/C
m=.1              #migration needed to prevent fixation in the event of extinction
xx=2
X=xx
Time=0
Tmax=2
tt=0
Events=c('Birth','Death')
### Euler integration of the logistic growth model dN/dt=r*N(1-N/K)
nsteps=1e3
times <- seq(0,Tmax,length.out = nsteps)
dt <- Tmax/nsteps
N <- c(xx,rep(NA,nsteps-1))
for (i in 2:nsteps){
N[i] <- N[i-1]+dt*(r*N[i-1]*(1-N[i-1]/K))
}
### Gillespie algorithm for simulating logistic growth one-step process
tic()
while(tt<Tmax){
p1=a*xx+m
p2=b*xx+C*xx^2
S=p1+p2
Dt=rexp(1,S)
Dx=sample(Events,size = 1,prob = c(p1,p2))
tt=tt+Dt
Time<-c(Time,tt)
X <- c(X,xx)
if(Dx=='Birth'){
xx=xx+1
} else {
xx=xx-1
}
Time<-c(Time,tt)
X <- c(X,xx)
}
toc()
###### Stochastic differential equation:
#### dY=(a-b)*Y(1-Y/K)dt+(a+b)*Y(1+Y/K)dW
logisticSDE <- function(Tmax,a,b,C,X){
Dt=0.01
Y <- numeric(Tmax/Dt+1)
Ty <- seq(0,Tmax,by=Dt)
dW <- rnorm(length(Y),sd=sqrt(Dt))
Y[1]=X[1]
for (i in 2:length(Y)){
Y[i]=Y[i-1]+
((a-b)*Y[i-1]-C*Y[i-1]^2)*Dt+
sqrt((a+b)*Y[i-1]+C*Y[i-1]^2)*dW[i]
}
return(list('time'=Ty,'Y'=Y))
}
plot(times,N,type='l',ylim=c(0,40))
tic()
for (i in 1:300){
SDE <- logisticSDE(Tmax,a,b,C,X)
lines(SDE$time,SDE$Y,type='l',col=rgb(0,0,1,0.1))
}
toc()
lines(times,N,lwd=2,col='black')
lines(Time,X,col='red',lwd=2)
set.seed(3)
library(tictoc)
a=5
b=1
Omega=20          #system size parameter
C=1/Omega
r=(a-b)
K=(a-b)/C
m=.1              #migration needed to prevent fixation in the event of extinction
xx=2
X=xx
Time=0
Tmax=4
tt=0
Events=c('Birth','Death')
### Euler integration of the logistic growth model dN/dt=r*N(1-N/K)
nsteps=1e3
times <- seq(0,Tmax,length.out = nsteps)
dt <- Tmax/nsteps
N <- c(xx,rep(NA,nsteps-1))
for (i in 2:nsteps){
N[i] <- N[i-1]+dt*(r*N[i-1]*(1-N[i-1]/K))
}
### Gillespie algorithm for simulating logistic growth one-step process
tic()
while(tt<Tmax){
p1=a*xx+m
p2=b*xx+C*xx^2
S=p1+p2
Dt=rexp(1,S)
Dx=sample(Events,size = 1,prob = c(p1,p2))
tt=tt+Dt
Time<-c(Time,tt)
X <- c(X,xx)
if(Dx=='Birth'){
xx=xx+1
} else {
xx=xx-1
}
Time<-c(Time,tt)
X <- c(X,xx)
}
toc()
###### Stochastic differential equation:
#### dY=(a-b)*Y(1-Y/K)dt+(a+b)*Y(1+Y/K)dW
logisticSDE <- function(Tmax,a,b,C,X){
Dt=0.01
Y <- numeric(Tmax/Dt+1)
Ty <- seq(0,Tmax,by=Dt)
dW <- rnorm(length(Y),sd=sqrt(Dt))
Y[1]=X[1]
for (i in 2:length(Y)){
Y[i]=Y[i-1]+
((a-b)*Y[i-1]-C*Y[i-1]^2)*Dt+
sqrt((a+b)*Y[i-1]+C*Y[i-1]^2)*dW[i]
}
return(list('time'=Ty,'Y'=Y))
}
plot(times,N,type='l',ylim=c(0,100))
tic()
for (i in 1:300){
SDE <- logisticSDE(Tmax,a,b,C,X)
lines(SDE$time,SDE$Y,type='l',col=rgb(0,0,1,0.1))
}
toc()
lines(times,N,lwd=2,col='black')
lines(Time,X,col='red',lwd=2)
setwd('~/Socolar/BirdPhylofactor/workspaces/')
load('CR_LUI_mStable_phylofactorization_workspace')
fit <- glm(cbind(Successes,Failures)~Season+phylo*LUI,family=binomial,data=Data)
Data <- pf$models[[1]]$data
fit <- glm(cbind(Successes,Failures)~Season+phylo*LUI,family=binomial,data=Data)
anova(fit)
anova(fit)['phylo:LUI','Deviance']
fit
beta.se <- sqrt(diag(vcov(fit)))
beta.se
beta.standardized <- fit$coefficients/beta.se
beta.standardized
summary(fit)
sum(beta.standardized[c('phyloS:LUIDiversified','phyloS:LUIIntensive')]^2)
coef(fit)
anova(fit)
pvDeviance(fit,pf$groups[[1]],pf$tree,PartitioningVariables = 'LUI',glm,Data)
library(phylofactor)
pvDeviance(fit,pf$groups[[1]],pf$tree,PartitioningVariables = 'LUI',glm,Data)
anova(fit)['phylo:LUI','Deviance']
anova(fit)
anova(fit)['phylo:LUI','Deviance']
fit2 <- glm(cbind(Successes,Failures)~Season+phylo,family=binomial,data=Data)
fit$deviance
fit2$deviance
fit$dieviance - fit2$deviance
fit$deviance - fit2$deviance
fit2$deviance-fit$deviance
(fit2$deviance-fit$deviance)/3
pvDeviance(fit,pf$groups[[1]],pf$tree,PartitioningVariables = 'LUI',glm,Data)
dev(fiut2)
dev(fit2)
deviance(fit2)
deviance
